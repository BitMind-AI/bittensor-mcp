/**
 * WARNING: This file is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 * Any changes should be made to the generation scripts instead.
 */

import fetch from "node-fetch";
import { API_BASE_URL } from "../index.js";

const API_KEY = process.env.BITMIND_API_TOKEN;

// API key validation is handled in index.ts
// Just ensure it's available for the request

interface ApiRequestOptions {
  method?: string;
  body?: any;
  headers?: Record<string, string>;
}

async function makeApiRequest<T>(
  endpoint: string,
  options: ApiRequestOptions = {}
): Promise<T> {
  if (!API_KEY) {
    throw new Error("BITMIND_API_TOKEN environment variable is required");
  }

  const url = `${API_BASE_URL}${endpoint}`;
  const headers = {
    Authorization: `Bearer ${API_KEY}`,
    "Content-Type": "application/json",
    ...options.headers,
  };

  const response = await fetch(url, {
    method: options.method || "GET",
    headers,
    body: options.body ? JSON.stringify(options.body) : undefined,
  });

  if (!response.ok) {
    const error = await response.text();
    throw new Error(`API request failed: ${response.status} ${error}`);
  }

  // Get the response as text first
  const responseText = await response.text();
  
  // Try to parse as JSON, but handle non-JSON responses gracefully
  try {
    // Check if the response starts with special prefixes like "data:" or "debug:"
    if (responseText.trim().startsWith('data:') || 
        responseText.trim().startsWith('debug:') ||
        responseText.includes('<!DOCTYPE html>')) {
      // Return the raw text if it's not JSON
      return responseText as unknown as T;
    }
    
    // Try to parse as JSON
    return JSON.parse(responseText);
  } catch (error) {
    // If JSON parsing fails, return the raw text
    console.error("Failed to parse response as JSON:", error);
    return responseText as unknown as T;
  }
}




export async function subnet_1_chat(params: any): Promise<any> {
  return makeApiRequest(`/1/chat`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_18_predict(params: any): Promise<any> {
  return makeApiRequest(`/18/predict`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_19_chat_completions(params: any): Promise<any> {
  return makeApiRequest(`/19/chat/completions`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_19_completions(params: any): Promise<any> {
  return makeApiRequest(`/19/completions`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_19_text_to_image(params: any): Promise<any> {
  return makeApiRequest(`/19/text-to-image`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_19_image_to_image(params: any): Promise<any> {
  return makeApiRequest(`/19/image-to-image`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_19_avatar(params: any): Promise<any> {
  return makeApiRequest(`/19/avatar`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_20_chat(params: any): Promise<any> {
  return makeApiRequest(`/20/chat`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_22_search(params: any): Promise<any> {
  return makeApiRequest(`/22/search`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_22_search_links_web(params: any): Promise<any> {
  return makeApiRequest(`/22/search/links/web`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_22_search_links_twitter(params: any): Promise<any> {
  return makeApiRequest(`/22/search/links/twitter`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_22_twitter(params: any = {}): Promise<any> {
  return makeApiRequest(`/22/twitter`, {
    method: "GET"
  });
}

export async function subnet_22_twitter_urls(params: any = {}): Promise<any> {
  return makeApiRequest(`/22/twitter/urls`, {
    method: "GET"
  });
}

export async function subnet_22_twitter_post(params: any = {}): Promise<any> {
  return makeApiRequest(`/22/twitter/post`, {
    method: "GET"
  });
}

export async function subnet_22_twitter_user_posts(params: any = {}): Promise<any> {
  return makeApiRequest(`/22/twitter/user/posts`, {
    method: "GET"
  });
}

export async function subnet_22_twitter_user_latest(params: any = {}): Promise<any> {
  return makeApiRequest(`/22/twitter/user/latest`, {
    method: "GET"
  });
}

export async function subnet_22_twitter_user_replies(params: any = {}): Promise<any> {
  return makeApiRequest(`/22/twitter/user/replies`, {
    method: "GET"
  });
}

export async function subnet_22_twitter_post_replies(params: any = {}): Promise<any> {
  return makeApiRequest(`/22/twitter/post/replies`, {
    method: "GET"
  });
}

export async function subnet_22_twitter_post_retweets(params: any = {}): Promise<any> {
  return makeApiRequest(`/22/twitter/post/retweets`, {
    method: "GET"
  });
}

export async function subnet_22_twitter_user(params: any = {}): Promise<any> {
  return makeApiRequest(`/22/twitter/user`, {
    method: "GET"
  });
}

export async function subnet_22_web(params: any = {}): Promise<any> {
  return makeApiRequest(`/22/web`, {
    method: "GET"
  });
}

export async function subnet_32_detect_text(params: any): Promise<any> {
  return makeApiRequest(`/32/detect-text`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_34_detect_image(params: any): Promise<any> {
  return makeApiRequest(`/34/detect-image`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_34_detect_video(params: any): Promise<any> {
  return makeApiRequest(`/34/detect-video`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_42_search(params: any): Promise<any> {
  return makeApiRequest(`/42/search`, {
    method: "POST",
    body: params,
  });
}

// Interface for subnet_42_status_by_jobUUID parameters
interface Subnet_42_status_by_jobUUIDParams {
  jobUUID: string;
}

export async function subnet_42_status_by_jobUUID(params: Subnet_42_status_by_jobUUIDParams): Promise<any> {
  // Replace path parameters with actual values
  let url = `/42/status/{jobUUID}`;
  for (const [key, value] of Object.entries(params)) {
    url = url.replace(`{${key}}`, value);
  }
  
  return makeApiRequest(url, {
    method: "GET"
  });
}

// Interface for subnet_42_result_by_jobUUID parameters
interface Subnet_42_result_by_jobUUIDParams {
  jobUUID: string;
}

export async function subnet_42_result_by_jobUUID(params: Subnet_42_result_by_jobUUIDParams): Promise<any> {
  // Replace path parameters with actual values
  let url = `/42/result/{jobUUID}`;
  for (const [key, value] of Object.entries(params)) {
    url = url.replace(`{${key}}`, value);
  }
  
  return makeApiRequest(url, {
    method: "GET"
  });
}

export async function subnet_47_compress_text(params: any): Promise<any> {
  return makeApiRequest(`/47/compress/text`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_47_compress_messages(params: any): Promise<any> {
  return makeApiRequest(`/47/compress/messages`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_64_chat_completions(params: any): Promise<any> {
  return makeApiRequest(`/64/chat/completions`, {
    method: "POST",
    body: params,
  });
}

export async function subnet_64_completions(params: any): Promise<any> {
  return makeApiRequest(`/64/completions`, {
    method: "POST",
    body: params,
  });
}
