name: Version Check and Tag

on:
  push:
    branches:
      - main
      - mcp-release-workflow-test
  workflow_dispatch:
    inputs:
      force_tag:
        description: 'Force tag creation even if version has not changed'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # We need at least the current and previous commit

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: Check if package.json version changed
        id: check_version
        run: |
          # Get current package.json version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # For workflow_dispatch with force_tag=true, we don't need to compare versions
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_tag }}" == "true" ]]; then
            echo "Force tag creation requested"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get the package.json from the previous commit
          git checkout HEAD~1 package.json
          PREVIOUS_VERSION=$(node -p "require('./package.json').version")
          echo "Previous version: $PREVIOUS_VERSION"
          
          # Restore current package.json
          git checkout HEAD package.json
          
          # Compare versions
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag if version changed
        if: steps.check_version.outputs.version_changed == 'true'
        run: |
          NEW_VERSION=${{ steps.check_version.outputs.new_version }}
          echo "Creating tag v$NEW_VERSION"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if tag already exists
          if git ls-remote --tags origin | grep -q "refs/tags/v$NEW_VERSION"; then
            echo "Tag v$NEW_VERSION already exists. Deleting it..."
            # Delete the tag locally if it exists
            git tag -d "v$NEW_VERSION" || true
            # Delete the tag on the remote
            git push --delete origin "v$NEW_VERSION" || true
          fi
          
          # Create and push tag
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin "v$NEW_VERSION"
          
          echo "âœ… Tag v$NEW_VERSION created and pushed"
